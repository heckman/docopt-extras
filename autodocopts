#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright 2025 Erik Heckman
#
#
# auto-docopts  v0.2.0
#
# A wrapper for docopts <https://github.com/docopt/docopts>
# that generates the help and version text for a file
# from its header comments.
#
#
# Usage:  auto-docopts [OPTIONS] [--] FILE [DOCOPT-OPTIONS] : [ARGUMENTS...]
#
# Within a script supported by docopts:
#    eval $(auto-docopts [OPTIONS] [--] FILE [DOCOPT-OPTIONS] : "$@")
#
# Parses the header fomment of FILE for help and version information, then
# forwards it to docopts, optionally processing with docopts-defaults first.S.
# DOCOPT-OPTIONS and ARGUMENTS are passed to docopts.
#
# Options:
#   --defaults     Process the generatedhelp-version text for default values
#                  with docopts-defaults before forwarding it to docopts.
#   --config FILE  Add a config file to find default values. Can be repeated
#                  for multiple files. Earlier files are overridden by later
#                  ones. Implies --defaults.
#   --print-only   Don't forward the generated help-version text to docopts,
#                  only print it. (Still processes defaults, if enabled.)
#   --version  FUNCTION
#                  A Gnu Awk function definition to print the version string.
#
# The help text is gathered from a comment starting with the comment
# "Usage: PROGRAM" and ends with the first blank or uncommented line.
#
# The version string is generated using PROGRAM from the Usage text, alng with
# VERSION, COPYRIGHT, and LICENSE which are parsed from any comments occurring
# before the Usage section. PROGRAM must appear on the same line as Usage:.
#
# If a custom version string is desired, use --version to define a Gnu Awk
# function with the signature: print_version(NAME, VERSION, COPYRIGHT, LICENSE)
#
# Requires:
#  - doctopts <https://github.com/docopt/docopts>
#  - doctopt-defaults (optional)
#  - GNU awk, for the match function with an array parameter

: "${GNU_AWK:=gawk}"

# use the docopts-defaults in the same directory as this script
DOCOPT_DEFAULTS="${0%/*}/docopt-defaults"


# PRINT_VERSION will be interpreted by gawk. It must contain a function
# that prints the version string; it must have the following header:
#   print_version(NAME, VERSION, COPYRIGHT, LICENSE)
# It will be called with the following arguments:
#   NAME       name of the program as it appears in the Usage: comment line
#   VERSION    version without leading 'v' or 'version'
#   COPYRIGHT  copyright without leading '(C)' or 'Copyright'
#   LICENSE    license without leading ...'License'... or trailing 'License'
#
# This code is the last thing executed by gawk so there is no need to worry
# about clobbering global variables, such as OFS.
PRINT_VERSION='
function print_version(NAME, VERSION, COPYRIGHT, LICENSE){
	OFS="\n"
	print( \
		VERSION?NAME " v" VERSION:NAME, \
		(COPYRIGHT? "Copyright " COPYRIGHT (LICENSE? ", ":""):"") \
		(LICENSE? "License: " LICENSE:"") \
	)
}
'

# set -euo pipefail
# set -x


# shellcheck disable=SC2154 # don't understand why status is not set?
trap 'status=$?; ! ((status)) || echo "exit $status # for the enwrapping eval"' EXIT

main(){
	local arg filename="${1-}"
	local defaults=false print_only=false delimeter='##'
	local config=()
	while
		arg="${1-}"
		shift
	do
		case "$arg" in
		( [!-]*)
			filename="$arg"
			break;;
		( -- )
			filename="${1-}"
			shift || : # catch this later
			break;;
		( --defaults )
			defaults=true;;
		( --config )
			config+=("$1")
			shift;;
		( --print-only )
			print_only=true;;
		# todo: ( --help ) help_exit;;
		# todo: ( --version ) version_exit;;
		( -* ) die "Unknown option: $arg" 64;;
		esac
	done

	[[ -n "$filename" ]] ||
		die "No file specified." 64

	help_version_text="$(get_help_version_text "${filename}")" ||
		die "Failed to read file '${filename}'" 66

	if $defaults && command -v "$DOCOPT_DEFAULTS" >/dev/null 2>&1
	then
		help_version_text="$(<<<"$help_version_text" \
			"$DOCOPT_DEFAULTS" "${config[@]}" -
		)"
	fi

	if $print_only
	then echo "$help_version_text"
	else docopts --help - --version - "${@}" <<<"$help_version_text"
	fi
}

# read help and usage information from the script specified in $1
# and print to stdout in a form that can be passed to docopts
#
# it does not parse any custom formatting
#
# shellcheck disable=SC2016  # awk will be doing the expansion
get_help_version_text(){
	# adjust spacing so that the opening ' is on a line ending with 1
	# that will make it easier to locate error in the gawk code
	"$GNU_AWK" \
		-v NAME="${name-}" \
		-v VERSION="${version-}" \
		-v COPYRIGHT="${copyright-}" \
		-v LICENSE="${license-}" \
		-v USAGE="${usage-}" \
		-v IGNORECASE=1 \
		-f <(cat <<'EOF'
# skip shebangs
/^#!/{next}

# the end of the usage section
/^[^#]|^$/{if(USAGE_INDENT)exit}

# the beginning of the usage section
!USAGE_INDENT && match($0,/^#[[:space:]]*usage:[[:space:]]*([^[:space:]]+)/,matches){
	NAME=matches[1]
	USAGE_INDENT=index($0,"u")
	USAGE=""
}

# currently reading the usage section
USAGE_INDENT{
	print(substr($0,USAGE_INDENT))
	next
}

# line contains the copyright
match($0,/#.*(copyright |\( ?c ?\) ?|copyright ?\( ?c ?\) ?) *(.*)$/,matches){
	COPYRIGHT=matches[2]
	next
}
# line contains the license specification
match($0,/^#[[:space:]]*([^[:space:]]*)[[:space:]]*License(-Identifier)?:? *([^[:space:]]*)/,matches){
	LICENSE=matches[3]?matches[3]:matches[1]
	next
}
# line contains version
match($0,"^# *[^[:space:]]* *v((er)?sion)?:? ?(.*)$",matches){
	VERSION=matches[3]
	next
}
EOF
echo "${PRINT_VERSION}"
echo 'END{
	print("----")
	print_version(NAME,VERSION,COPYRIGHT,LICENSE)
}'
) "$1"
}

die(){
	echo "autodocopts error: $1" >&2
	"$GNU_AWK" -F '# ?' '$1{exit}/^#!/{next}{print $2}' "$0" >&2
	exit 64
}

main "$@"
#
